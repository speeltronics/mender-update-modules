#!/bin/sh

set -e
set -x

STATE="$1"
FILES="$2"

backup_dir="$FILES"/tmp
dest_dir_file="$FILES"/files/dest_dir
manifest_file_from_deployment="$FILES"/files/manifest
update_files_tar="$FILES"/files/update.tar


state_dir="/var/lib/mender/dir-overlay-once-install"
manifest_file_prev="$state_dir/manifest.prev"
prev_files_tar="$state_dir/backup.tar"

# Summary of module implementation
#
# Based off of dir-overlay module. This module works similar to dir-overlay, 
# but after a successful deployment, it will not look at the previous deployment.
# Deployments are considered to be one-time deployments. The deployment will only be rolled back if it fails.
# Multiple different deployments can be deployed independent of each other. Optionally, deployments can require 
# a previous artifact to have been deployed before the current artifact will be deployed.
# TODO - Implement this feature.
# TODO - Implement saving each deployed ARTIFACT_NAME and only optionally only allowing deployments if 
# a previous artifact has already been deployed.
#
# NOTE! This module stores state in /var/lib/mender 
#
# In ArtifactInstall state:
#
# If a manifest file exists, which means that there has been a previous
# successful deployment with this module:
#
#    1. Create a backup of current deployment, the manifest file
#       is parsed to determinate which files where installed on last successful
#       deployment.
#
#    2. The current deployment is removed from the system, the manifest file
#       is parsed to determinate which files where installed on last
#       successful deployment.
#
#    3. Mark the current manifest file as previous (manifest.prev), note at
#       this stage there is currently no active manifest. It can be restored
#       in two ways. Either a roll-back is performed or deployment in progress
#       finishes successfully.
#
#    4. Unpack/install content
#
# If manifest file does not exist, which means no previous deploy:
#
#      1. Unpack/install content
#
# In ArtifactCommit state:
#
# 1. Restore the "current manifest" file based on the manifest that is part of
#    the deployment
#

case "$STATE" in

    NeedsArtifactReboot)
        echo "No"
    ;;

    SupportsRollback)
        echo "Yes"
    ;;

    ArtifactInstall)

        echo "EVAN DEBUG - Installing!!!!!!"

        dest_dir=$(cat $dest_dir_file)
        mkdir -p $dest_dir $state_dir

        # process deployment manifest - backup and remove deployment files if they already exist
        if [ -e $manifest_file_from_deployment ]; then
            # create backup directory
            mkdir -p $backup_dir
            # loop through the manifest and copy any currently existing files to the backup dir
            for file in $(cat $manifest_file_from_deployment); do
                if [ -e $dest_dir/$file ]; then
                    cp $dest_dir/$file $backup_dir/
                fi
            done
            # tar the backup directory
            tar -cf ${prev_files_tar} -C ${backup_dir} .

            # set the deployment manifest to previous manifest in case we need to roll back from a failure
            # do this after tarring so we know on a rolback all the files have been backed up
            mv $manifest_file_from_deployment $manifest_file_prev

            # remove any current files being updated if they already exist
            # if there is a failure or power off during this process, we already have the 
            # files backed up so they can be rolled back, if needed
            for file in $(cat $manifest_file_from_deployment); do
                if [ -e $dest_dir/$file ]; then
                    rm $dest_dir/$file
                fi
            done
            
        fi
        # create destination directory
        mkdir -p ${dest_dir}
        # untar the deployment tar file to the destination directory
        tar -xf ${update_files_tar} -C ${dest_dir}
        # sync the filesytem
        sync
        ;;

    ArtifactCommit)
        echo "EVAN DEBUG - Committing!!!!!!"

        # if here then files should already be deployed, remove the previous manifest and backup tar file, the update succeeded
        
        # remove the previous manifest
        rm $manifest_file_prev
        
        # remove the $prev_files_tar
        rm $prev_files_tar

        ;;

    ArtifactRollback)
        echo "EVAN DEBUG - Rolling back!!!!!!"

        # if here then we need to rollback
        dest_dir=$(cat $dest_dir_file)

        # exit if the previous manifest does not exist, nothing should have been removed or updated
        [[ -f $manifest_file_prev ]] || exit 0

        # exit if the backup tar does not exist, this should exist if the previous manifest exists
        [[ -f $prev_files_tar ]] || exit 0

        # untar the backup, this could potentially leave new updated files hanging around if the failure occurred while untarring the deployment!
        tar -xf ${prev_files_tar} -C ${dest_dir}

        # remove the previous manifest
        rm $manifest_file_prev

        # remove the $prev_files_tar
        rm $prev_files_tar

        # sync the filesytem
        sync
        ;;

    Cleanup)
        echo "EVAN DEBUG - Cleaning up!!!!!!"
        ;;
esac

exit 0
